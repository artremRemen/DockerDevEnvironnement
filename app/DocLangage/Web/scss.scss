$variable: #111111;       /* permet de créer des variables */
$variable: 'variable phrase #{$autre varialbe}';    /* une var peut etre appeller dans une var */       
$variable: #111111!default;       /* il prendras cette valeur par défault uniquement si la variable n'est pas déclarer plus loins */

//commentaire non compiler et non visible en sortie

@import "file";             /* importer un fichierscc scss */

.classname{                 /* permet d'imbriquer plusieurs blocs les uns dans les autres (pas de limites) !! ne pas en abuser */
    .classname2{
        @include mixinnamme ('param');    /* va importer la mixin en mettant le nom de celle ci et en mettant des parametres si necessaire*/ 
        @include mixinnamme2 ($param: 10px);    /* si on ne veux modifier que l'un des parametre alors on écris le nom du param en variable et la valeur apres les : (peux fonctionner avec tous les parametres)*/ 
    }
    &:hover{                /* permet de mettre un hover ou autre en lui mettant le selecteur avant devant grace au & */
        -ms-flex: auto;     /* compatibilité pour internet explorer */
        -webkit-flex: auto;     /* compatibilité pour chrome */
        -moz-flex: auto;     /* compatibilité pour mozilla */
        -o-flex: auto;     /* compatibilité pour opera */

    }
    .classname2 &{          /* va mettre les deux selecteurs un a la suite de lautre grace au & */
        background: {               /* permet de faire plusieurs propriété sans devoir remettre a chaque fois le background (fonctionne aussi pour le reste sils ont plusieurs proprietés) */
            color: #111111;
            repeat:no-repeat;
        }
    }

    @media screen and (max-width: 1200px) {     /* lors que la media querry seras créer alors le selecteur ce mettras dedasn avec les regles mise dans la média !!! ne groupe pas les mediaquerry */
        
    }
}

.class3{
    @extend .classname;           /* va étendre le selecteur mis au selecteur dans lequel il est */
}

%fauxselecteur{                     /* ce selecteur ne seras pas compiler mais peux servir afin de l'étendre dans les autres selecteurs */
    //code...

    padding: $variable + 10px       /* on peux appliquer des operations sur des variables si on fait une operations sur une valeur qui na pas d'uniter et une qui en a alors il prendrons la valeur qui a l'unité */
}

@media #{$varialbe} {                  /* on peux mettre une variable dans le selecteur si il y a une #devant et qu'elle est entourer par des accolades */

}
/* fonctions */
.fonctions{             /* https://sass-lang.com/documentation/Sass/Script/functions.html    https://sass-lang.com/documentation/modules/ */

    background-color: darken($varialbe, 10);                  /* permet d'assombrir une couleur d'autant de % que la valeur donner en deuxieme parametre */
    background-color: lighten($varialbe, 10);                  /* permet d'eclairsir une couleur d'autant de % que la valeur donner en deuxieme parametre */
    background-color: desaturate($varialbe, 10);                  /* permet de desaturer une couleur d'autant de % que la valeur donner en deuxieme parametre */

}

@mixin name($variable: 'defaultvalue'){                                                    /* permet de creer une mixin, elle peux avoir des parametres  qui peuvent avoir des valeur par défault  */
    calc(10px-1px);   
    
    &{                                                                                  /* va appliquer le triangle sur le selecteur parent (selecteur qui va appeller la mixin) */             
        /* ce groupe de regle permet de créer un triangle en css */
        width: 0;
        height: 0;
        border-top: 10px solide #000000;
        border-left: 10px solide #000000;
        border-right: 10px solide #000000;

        }/* permet de faire un calcul depuis le css */
}

.triangle{             
                    /* ce groupe de regle permet de créer un triangle en css */
    width: 0;
    height: 0;
    border-top: 10px solide #000000;
    border-left: 10px solide #000000;
    border-right: 10px solide #000000;

}

@function functionName($size, $base: 16) {        /* cree un fonction que l'on peux utiliser dans le code (cette fonction transforme les px en rem) */
    @return  1rem*$size/$base;
}

.functioncall{
    padding-left: rem(5, 16);       /* appelle la fonction et reverras la valeure rendue par la fonction */
}

@function strip-unit($number){                      /* permet de retirer l'uniter d'une valeure */
    @if type-of($number) == 'number' and not unitless($number){
        @return $number / ($number * 0 +1);
    }
    @return $number;
}

.conditions{
    @if('condition'){               /* si la condition est remplie tu effectue le code jsute en dessous sinon tu effectue le code sous le else */

    }@else{

    }

    @debug ligtness($solor)>50%;                  /* permet d'afficher en console la valeur */

    @if(ligtness($solor)>50% and not ligtness($solor)<25% ){          /* si la luminausité de la couleur est superieur a 50% alors tu execute */

    }
}

.boucles{
    @for $i from 1 through 4 {                  /* va effectuer la boucle de 1 a 4 (les valeurs peuvent varier en fonction du besoin) et le i va passer la tous ce qui est entre */
        .m-#{$i}{
            background-color: #000000;
        }
    }
    $table: value1 , value2 , value3;                               /* creation d'un tableau   */
    $table: value1 value1.1, value2 value2.2, value3;               /* creation d'un tableau a deux valeurs  */
    @each $result in $table{                    /* va parcourir le tableau et mettre chaque valeur dans la variable result */
        .#{nth($result, 1)}{                    /* va aller recherche dans le résultat la premiere valeur  */
          background-color: nth($result, 2);                    /* va aller recherche dans le résultat la deuxieme valeur stocker dans la variable */
        }
    } 
}
/* Commandes */
